from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from django_bot.models import TelegramUser, Cakes, Cart, Images
from django.shortcuts import get_object_or_404
import menu as menu

from dotenv import load_dotenv, find_dotenv
from environs import Env
import logging

from asgiref.sync import sync_to_async

from aiogram import types
from aiogram.dispatcher.filters.builtin import CommandStart
from django.core.management.base import BaseCommand


logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

env = Env()
load_dotenv(find_dotenv())
bot = Bot(token=env.str('TELEGRAMBOT_KEY'))
storage = MemoryStorage()  # For example use simple MemoryStorage for Dispatcher.
dp = Dispatcher(bot, storage=storage)


class FormDataUserSetStatus(StatesGroup):
    user_id = State()
    user_type = State()


async def aget_or_create(self, **kwargs):
    return await sync_to_async(self.get_or_create(**kwargs))

@sync_to_async
def set_user(user_id):
    telegram_user, new_user = TelegramUser.objects.get_or_create(chat_id=user_id)
    return telegram_user, new_user


@sync_to_async
def get_cakes():
    cakes = Cakes.objects.all()
    return list(cakes)

@sync_to_async
def get_cakes_title(title):
    cake = Cakes.objects.get(short_title=title)
    return cake

@sync_to_async
def get_image_path(cake):
    return cake.image_id.path


# ============================================================================================================================================================================================================================
@dp.message_handler(CommandStart())
async def command_start(message: types.Message):
    # await bot.send_message(message.from_user.id, "---", reply_markup=menu.main_menu)
    # —Ç.–µ. –µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π —Ä–∞–∑ - –∑–∞–Ω–æ—Å–∏–º –≤ –ë–î
    # telegram_user, new_user = await TelegramUser.objects.get_or_create(chat_id=message.from_user.id)
    telegram_user, new_user = await set_user(message.from_user.id)
    user = message.from_user.first_name

    if not new_user:
        logging.info("user –µ—Å—Ç—å –≤ –ë–î")
        await bot.send_message(message.from_user.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –ó–∞—Ä–µ–≥–∞–Ω –≤ –ë–î !\n", reply_markup=menu.main_menu)
    else:
        logging.info("New user")
        await bot.send_message(message.from_user.id, f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –ó–∞—Ä–µ–≥–∞–Ω –≤ –ë–î !\n–¢—É—Ç –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É –≤—ã–¥–∞—Ç—å –Ω–µ —Ä–∞–±–æ—á–µ–µ –º–µ–Ω—é, –∞ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫\n", reply_markup=menu.main_menu)


# ============================================================================================================================================================================================================================
@dp.message_handler(commands=['help'])
async def command_start(message: types.Message):
    await bot.send_message(message.from_user.id, "!", reply_markup=menu.supportUserMenu)


# ============================================================================================================================================================================================================================
@dp.message_handler(state='*', commands='stop')  # You can use state '*' if you need to handle all states
@dp.message_handler(Text(equals='stop', ignore_case=True), state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.reply('–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ üÜë', reply_markup=menu.StartHelpUserMenu)


# ============================================================================================================================================================================================================================
@dp.message_handler()
async def bot_message(message: types.Message):
    print(message.text)

    cakes = await get_cakes()
    cake_basket = []
    cake_title = []
    for cake in cakes:
        cake_title.append(cake.short_title)

    
    # if (getUserInfo(message.from_user.id) == ""):  # –±–∞–≥
    #         "–í–Ω–∏–º–∞–Ω–∏–µ ‚Åâ\n‚ö† –î–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤ –º–µ–Ω—é (–≤–≤–µ—Ä—Ö—É —Å–ø—Ä–∞–≤–∞) –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∑–∞–Ω–æ–≤–æ !\n‚ö† –ò–Ω–∞—á–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞ - –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è üò±",

    # ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    if message.text == '–ì–æ—Ç–æ–≤—ã–µ —Ç–æ—Ä—Ç—ã üç∞':
        cakes = await get_cakes()

        for cake in cakes:
            text = f'\n*{cake.short_title}*\n'\
                    f'---------------------------\n'\
                    f'{cake.description}\n'\
                    f'---------------------------\n'\
                    f'*{cake.price} —Ä—É–±*'
            image_path = await get_image_path(cake)
            with open(f'media/{image_path}', 'rb') as photo:
                await bot.send_photo(
                    chat_id=message.from_user.id,
                    photo=photo,
                    caption=text,
                    parse_mode='Markdown')

        await bot.send_message(message.from_user.id, '–í—ã–±–∏—Ä–∞–π—Ç–µ', reply_markup=menu.ReadyCakeRoot)

    if message.text in cake_title:
        name_cake = message.text
        cake = await get_cakes_title(name_cake)
        
        text = f'\n*{cake.short_title}*\n'\
                    f'---------------------------\n'\
                    f'{cake.description}\n'\
                    f'---------------------------\n'\
                    f'*{cake.price} —Ä—É–±*'
        image_path = await get_image_path(cake)
        with open(f'media/{image_path}', 'rb') as photo:
            await bot.send_photo(
                chat_id=message.from_user.id,
                photo=photo,
                caption=text,
                parse_mode='Markdown')

        await bot.send_message(
            message.from_user.id,
            '–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É?',
            reply_markup=menu.btnMenuYesOrNo)
        
    if message.text == "–î–æ–±–∞–≤–∏—Ç—å":
        pass
    
    if message.text == '–û –Ω–∞—Å ...':
        await bot.send_message(message.from_user.id,'üòé\n–ú–µ–≥–∞-–∫—Ä—É—Ç–æ–π –±–æ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —Ç–æ—Ä—Ç–∏–∫–∏...')

    if message.text == '–í–∞–Ω–∏–ª—å–Ω—ã–µ':
        await bot.send_message(message.from_user.id, '–í–∞–Ω–∏–ª—å–Ω—ã–µ —Ç–æ—Ä—Ç—ã',  reply_markup=menu.ReadyCakeVanila)

    if message.text == '–®–æ–∫–æ–ª–∞–¥–Ω—ã–µ':
        await bot.send_message(message.from_user.id, '–®–æ–∫–æ–ª–∞–¥–Ω—ã–µ —Ç–æ—Ä—Ç—ã\nüöß –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...')

    if message.text == '–Ø–≥–æ–¥–Ω—ã–µ':
        await bot.send_message(message.from_user.id,'–Ø–≥–æ–¥–Ω—ã–µ —Ç–æ—Ä—Ç—ã\nüöß –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...')

    if message.text == '–û—Ç —à–µ—Ñ–∞':
        await bot.send_message(message.from_user.id,'–û—Ç —à–µ—Ñ–∞ —Ç–æ—Ä—Ç—ã\nüöß –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...')

    if message.text == '–í–∞–Ω–∏–ª—å–Ω–∞—è –º–µ—á—Ç–∞':
        await bot.send_message(message.from_user.id,'–¢—É—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É - üöß –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...')

    if message.text == '–í–∞–Ω–∏–ª—å–∫–∞-–º–∞–Ω–∏–ª—å–∫–∞':
        await bot.send_message(message.from_user.id,'–¢—É—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É - üöß –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...')

    if message.text == '–õ–µ–¥–∏ –í–∞–Ω–∏–ª—å':
        await bot.send_message(message.from_user.id,'–¢—É—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É - üöß –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...')

    # ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    elif message.text == 'üì∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await bot.send_message(message.from_user.id, 'ü•Æ', reply_markup=menu.main_menu)

    elif message.text == '–ö–æ—Ä–∑–∏–Ω–∞':
        await bot.send_message(message.from_user.id, 'üõí',
                               reply_markup=menu.btnMenuBasket)

    elif message.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É':
        await bot.send_message(message.from_user.id, '–¢—É—Ç - –ø–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –≤ –∫–æ—Ä–∑–∏–Ω–µ –∏–∑ –ë–î')

    elif message.text == '–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É':
        await bot.send_message(message.from_user.id, '–¢—É—Ç - –æ—á–∏—Å—Ç–∏—Ç—å —á—Ç–æ –≤ –∫–æ—Ä–∑–∏–Ω–µ –∏–∑ –ë–î')

    elif message.text == '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑':
        await bot.send_message(message.from_user.id, '–¢—É—Ç - –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –∏–∑ –ë–î\n–ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é-–∞–¥—Ä–µ—Å–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏')

    elif message.text == '–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ç–æ—Ä—Ç–æ–≤ üèó':
        await bot.send_message(message.from_user.id, '–£–∂–µ —Å–∫–æ—Ä–æ\nüöß –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...')

    elif message.text == '–ú–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è':
        await bot.send_message(message.from_user.id, '–£–∂–µ —Å–∫–æ—Ä–æ\nüöß –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...')


    elif message.text[0] == '‚Ññ':
        #—Ç—É—Ç –º—ã –ø–æ–ª—É—á–∏–ª–∏ —Ç–æ—Ä—Ç - –≤–µ—Ä–Ω–µ–µ —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ ‚Ññ(1....) –ù–∞–∑–≤–∞–Ω–∏–µ. –ò–∑ —ç—Ç–æ–≥–æ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å id - —Ç.–µ. –∫–ª—é—á —Ç–æ—Ä—Ç–∞ –∏ –¥–∞–ª–µ–µ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ –∫–æ—Ä–∑–∏–Ω—É
        split_string = str(message.text).split(' ')
        cake_id = str(split_string[0]).replace('‚Ññ','')
        cake_name = str(split_string[1])
        # –¥–∞–ª–µ–µ –∫–æ–¥ - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É –ø–æ cake_id
        # ....

        –ø–æ–∫–∞ –∑–∞–≤–∏—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏...

        # Cart.objects.create(client_id=await set_user(id=message.from_user.id)[0], product=Cakes.objects.aget(id=int(cake_id)))
        # Cart.objects.create(client_id=TelegramUser.objects.aget(id=message.from_user.id), product=Cakes.objects.aget(id=int(cake_id)))
        # current_user = TelegramUser.objects.aget(id__contains=message.from_user.id)
        # print(current_user)

        await Cart.objects.acreate(client_id= await (TelegramUser.objects.aget(id__contains=message.from_user.id)), product= await Cakes.objects.aget(id=int(cake_id)))
        # await Cart.objects.acreate(client_id= await (TelegramUser.objects.aget(id=message.from_user.id)), product= await Cakes.objects.aget(id=int(cake_id)))

        await bot.send_message(message.from_user.id, '–¢–æ—Ä—Ç '+ cake_name + ' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É ‚úÖ', reply_markup=menu.main_menu)

    else:
        await bot.send_message(message.from_user.id, "\n", reply_markup=types.ReplyKeyboardRemove())


class Command(BaseCommand): # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ - "Command"
  	# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –æ–±—ã—á–Ω–æ
    help = 'Implemented to Django application telegram bot setup command'
    def handle(self, *args, **kwargs):
        executor.start_polling(dp, skip_updates=False)